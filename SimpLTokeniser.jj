/**
 *  A Lexical analyser for the SimpL language.
 * 
 * @Author Richard Kavanagh 
 */


/*******************************
***** SECTION 1 - OPTIONS *****
*******************************/

options {
	JAVA_UNICODE_ESCAPE = true;
	IGNORE_CASE = true;
	STATIC = true;
}


/*************************************
***** SECTION 2 - PARSER USER CODE ***
**************************************/

PARSER_BEGIN(SimpLTokeniser)
	public class SimpLTokeniser {
		public static void main(String args[]) {
			SimpLTokeniser tokeniser;
			if (args.length == 0) {
				System.out.println("Reading from standard input . . .");
				tokeniser = new SimpLTokeniser(System.in);
			}
			else if (args.length == 1) {
				try {
					tokeniser = new SimpLTokeniser(new java.io.FileInputStream(args[0]));
				} catch (java.io.FileNotFoundException e) {
					System.err.println("File " + args[0] + " not found.");
					return;
				}
			}
			else {
				System.out.println("SLP Tokeniser: Usage is one of:");
				System.out.println(" java SimpLTokeniser < inputfile");
				System.out.println("OR");
				System.out.println(" java SimpLTokeniser inputfile");
				return;
			}

			for(Token token = getNextToken(); token.kind != EOF; token = getNextToken()){
				System.out.print(token.image);	
			}
		}
	}
}

PARSER_END(SimpLTokeniser)


/*****************************************
***** SECTION 3 - TOKEN DEFINITIONS *****
*****************************************/


TOKEN_MGR_DECLS: {
	static int commentNestingLevel = 0;
}


/* Single level comments */
SKIP : {  "--"  { commentNestingLevel = 1 ; } : COMMENT } 
< COMMENT >  SKIP : {  "\n"  {
    commentNestingLevel -= 1;
    SwitchTo( commentNestingLevel == 0 ? COMMENT : DEFAULT ) ; } } 


/* Nested Comments */
SKIP : {  "/*"  { commentNestingLevel = 0 ; } : COMMENT } 
< COMMENT >  SKIP : {  "/*" { commentNestingLevel += 1 ; } } 
< COMMENT >  SKIP : {  "*/" {
    commentNestingLevel -= 1;
    SwitchTo( commentNestingLevel == 0 ? DEFAULT : COMMENT ) ; } } 


< COMMENT >  SKIP : {  < ~[] > } 

/* Ignoring spaces/tabs/newlines */

SKIP : {
	" "
	| "\t"
	| "\n"
	| "\r"
	| "\f"
}


/* Keywords */
TOKEN :  {
	< AND : "and" >
	| < BOOL : "bool" >
	| < CONST : "const" >
	| < DO : "do" >
	| < ELSE : "else" >
	| < FALSE : "false" >
	| < IF : "if" >
	| < INT : "int" >
	| < MAIN : "main" >
	| < NOT : "not" >
	| < OR : "or" >
	| < REAL : "real" >
	| < RETURN : "return" >
	| < STRING : "string" >
	| < THEN : "then" >
	| < TRUE : "true" >
	| < VAR : "var" >
	| < VOID : "void" >
	| < WHILE : "while" >
}


/* Operators, Relations and Punctuation marks */
TOKEN :  {
	< PLUS : "+" >
	| < MINUS : "-" >
	| < MULTIPLY : "*" >
	| < DIVIDE : "/" >
	| < MODULUS : "%" >
	| < EQUALS : "=" >
	| < NOTEQUALS : "!=" >
	| < LESS : "<" >
	| < GREATER : ">" >
	| < LESSEQUAL : "<=" >
	| < GREATEREQUAL : ">=" >
	| < OPENBRACKET : "(" >
	| < CLOSEBRACKET : ")" >
	| < OPENCURLY : "{" >
	| < CLOSECURLY : "}" >
	| < COMMA : "," >
	| < SEMIC : ";" >
	| < COLON : ":" >
	| < DOT : "." >
	| < ASSIGNMENT : ":=" >
	| < QUESTIONMARK : "?" >
	| < EXCLAMATION : "!" >
}


/* Numbers  */
TOKEN :  {
	< NUM : (<MINUS>)? (<DIGIT>)+ >
	| < DOUBLE : ((<MINUS>)? (<DIGIT>)+ <DOT> (<DIGIT>)+) >
	| < #DIGIT : ["0" - "9"] > 
}


/* Strings  */
TOKEN : { 
	< CHARS : <QUOTE>  ( (<CHAR>)
	 				   | (<BACKSLASH><QUOTE>)
	 				   | (<BACKSLASH><BACKSLASH>)
	 				   | (<BACKSLASH><BACKSLASH><NEWLINE>)
	 		)* <QUOTE> >
	| < #CHAR : ["a"-"z","A"-"Z", " "]>
	| < #QUOTE : ("\"") >
	| < #BACKSLASH : "\\" >
	| < #NEWLINE : "N" | "R" >
}


/* Identifiers */
TOKEN : {
	<IDENTIFIER : <LETTER> (<IDSUFFIX>)* > 
	| < #IDSUFFIX : <LETTER> | <DIGIT> | <UNDERSCORE> >
	| < #LETTER : ["a"-"z","A"-"Z"]>
	| < UNDERSCORE : "_" >	
}

/* Catch all for undefined tokens */
TOKEN : {
	<OTHER : ~[]>
}


/*****************************************
***** SECTION 4 - Production Rules *****
*****************************************/


SimpleNode program() : {} {
    (declaration())* 
    (function())* 
    main_program()
    <EOF> {
        return jjtThis;
    }
}


void main_program() : {} {
    <MAIN> <OPENCURLY> 
        (declaration())*
        (statement() <SEMIC>)*
    <CLOSECURLY>
}


void statement() : {} {
		<IDENTIFIER> (<ASSIGNMENT> (expression() | <CHARS>)| <OPENBRACKET> argument_list() <CLOSEBRACKET> )
		| <EXCLAMATION> expression()
		| <OPENBRACKET> (statement() <SEMIC>)* <CLOSEBRACKET>
		| <QUESTIONMARK> expression()
		| <IF> condition() <THEN> ((<OPENCURLY>(statement() <SEMIC> )*  <CLOSECURLY>) | ( statement() ) ) <ELSE> <OPENCURLY> statement() <CLOSECURLY>
		| <WHILE> condition() <DO> ( (<OPENCURLY> (statement() <SEMIC> )*  <CLOSECURLY>)  |(statement() )) 
		| {}
}

 
void declaration() : {} {
	(variable_declaration() | const_declaration())
}


void const_declaration() : {} {
    <CONST> <IDENTIFIER> <COLON> types() <ASSIGNMENT> expression()( <COMMA> <IDENTIFIER> <COLON> types() <ASSIGNMENT> expression())*
}


void variable_declaration() #VAR : {} {
	<VAR> identifiers_list() <COLON> types() ( <COMMA> identifiers_list() <COLON> types() )* <SEMIC>
}


void identifiers_list () :{}{
	<IDENTIFIER> (<COMMA><IDENTIFIER>)*
}


void types () :{} {
	<INT> |
	<BOOL> |
	<REAL> |
	<STRING> |
	<VOID>	
}


void expression() : {} {
      (<IDENTIFIER> (fragment_second() | <OPENBRACKET> argument_list() <CLOSEBRACKET> | {} ) |
      (fragment()  (fragment_second())*)) 
}


void condition() : {} {
      <NOT> expression()	|
	  expression() (comparision_operator()) expression() 
}


void comparision_operator() : {} {
	<EQUALS> 		|
	<NOTEQUALS>		| 
	<LESSEQUAL>	 	| 
	<GREATEREQUAL>	| 
	<LESS> 			| 
	<GREATER> 		| 
	<AND>			| 
	<OR>
}


void function() : {} {
	types() <IDENTIFIER> <OPENBRACKET>  paramater_list() <CLOSEBRACKET>
	 <OPENCURLY>
		( declaration() )*
		( statement() <SEMIC> )*
		<RETURN> ( expression() | {} ) <SEMIC>
	<CLOSECURLY>
}


void paramater_list() : {} {
		<IDENTIFIER>
		<COLON>
		types()
		( <COMMA> <IDENTIFIER> <COLON> types() )* | {}
}


void fragment() : {} {
	<NUM>	| (<PLUS>	| <MINUS>	| <MULTIPLY> | <DIVIDE>	| <MODULUS> )
	fragment() (fragment_second() | {})
}
 

void fragment_second() : {} {
    ((<PLUS>	| <MINUS>	| <MULTIPLY> | <DIVIDE>	| <MODULUS>
    ) ((<IDENTIFIER> (fragment_second() | {})) | fragment()))
}

				
void argument_list() : {Token t;} { 
	(<IDENTIFIER>)* (<COMMA>  <IDENTIFIER>)*
}